<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>记我所记</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://blog.miku.tk/"/>
  <updated>2017-12-08T04:23:33.000Z</updated>
  <id>http://blog.miku.tk/</id>
  
  <author>
    <name>miku.tk</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Go 日常笔记</title>
    <link href="http://blog.miku.tk/gonote/"/>
    <id>http://blog.miku.tk/gonote/</id>
    <published>2017-12-08T04:23:33.000Z</published>
    <updated>2017-12-08T04:23:33.000Z</updated>
    
    <content type="html"><![CDATA[<p>Go 中一些常被忽略的地方。<br><a id="more"></a></p><ol><li><p>append 在切片容量不足时，会返回一个新的切片，且不改变原切片的任何值</p> <figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">s := []<span class="keyword">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>&#125;</span><br><span class="line">s1 := <span class="built_in">append</span>(s[:<span class="number">1</span>], <span class="number">3</span>)</span><br><span class="line"><span class="built_in">println</span>(s, s1)</span><br><span class="line">fmt.Println(s, s1)</span><br><span class="line"></span><br><span class="line">s2 := <span class="built_in">append</span>(s[:<span class="number">1</span>], <span class="number">4</span>, <span class="number">5</span>)</span><br><span class="line"><span class="built_in">println</span>(s, s2)</span><br><span class="line">fmt.Println(s, s2)</span><br></pre></td></tr></table></figure><p> 输出</p> <figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[2/2]0x10410020 [2/2]0x10410020</span><br><span class="line">[1 3] [1 3]</span><br><span class="line">[2/2]0x10410020 [3/4]0x10410050</span><br><span class="line">[1 3] [1 4 5]</span><br></pre></td></tr></table></figure></li><li><p>值方法可通过指针和值调用， 而指针方法只能通过指针来调用；值方法针对对象副本，每次调用都会先进行内存复制</p> <figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Int <span class="keyword">int</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(i *Int)</span> <span class="title">String</span><span class="params">()</span> <span class="title">string</span></span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"My String()"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> i Int</span><br><span class="line">    fmt.Println(i, &amp;i)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> 输出</p> <figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">0 My String()</span><br></pre></td></tr></table></figure></li><li><p>接口类型并不能屏蔽非接口方法</p> <figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Int <span class="keyword">int</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(i *Int)</span> <span class="title">String</span><span class="params">()</span> <span class="title">string</span></span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"My String()"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(i *Int)</span> <span class="title">Error</span><span class="params">()</span> <span class="title">string</span></span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"My Error()"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"> <span class="keyword">var</span> i Int</span><br><span class="line">    <span class="keyword">var</span> s fmt.Stringer = &amp;i</span><br><span class="line">    fmt.Println(&amp;i, s)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> 输出</p> <figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">My Error() My Error()</span><br></pre></td></tr></table></figure></li><li><p>向满 channel 发数据和从空 channel 取数据，只有在没有 goroutine 运行时（注：这里运行指的非 asleep 状态，读写 channel 的阻塞态算 asleep，time.Sleep 不算，select 所有分支都阻塞时算 asleep）会报错，有其它 goroutine 运行时才会阻塞</p></li><li><p>关闭的 channel 在缓冲区没有清空时，仍能正常取数据，第二参数返回 true</p> <figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">c := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">int</span>)</span><br><span class="line">c &lt;- <span class="number">1</span></span><br><span class="line"><span class="built_in">close</span>(c)</span><br><span class="line">i, ok := &lt;-c</span><br><span class="line"><span class="built_in">println</span>(i, ok)</span><br><span class="line">i, ok = &lt;-c</span><br><span class="line"><span class="built_in">println</span>(i, ok)</span><br></pre></td></tr></table></figure><p> 输出</p> <figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1 true</span><br><span class="line">0 false</span><br></pre></td></tr></table></figure></li><li><p>select default 嵌套提高 channel 优先级</p> <figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line">    <span class="keyword">select</span> &#123;</span><br><span class="line">    <span class="keyword">case</span> &lt;-highChannel:</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">        <span class="keyword">select</span> &#123;</span><br><span class="line">            <span class="keyword">case</span> &lt;-lowChannel:</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>select default 分离保证 channel 最少调度</p> <figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line">    <span class="keyword">select</span> &#123;</span><br><span class="line">    <span class="keyword">case</span> &lt;-c1:</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">select</span> &#123;</span><br><span class="line">    <span class="keyword">case</span> &lt;-c2:</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>make(chan type) 默认容量为 0，即同步 channel</p></li><li><p>关闭所有接收端，不跳过已缓冲数据（一对多）</p> <figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">    ch := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">int</span>, <span class="number">3</span>)</span><br><span class="line">    <span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">(ch <span class="keyword">chan</span> <span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">        <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">10</span>; i++ &#123;</span><br><span class="line">            ch &lt;- i</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">close</span>(ch)</span><br><span class="line">    &#125;(ch)</span><br><span class="line"></span><br><span class="line">LOOP:</span><br><span class="line">    <span class="keyword">for</span> &#123;</span><br><span class="line">        <span class="keyword">select</span> &#123;</span><br><span class="line">        <span class="keyword">case</span> i, running := &lt;-ch:</span><br><span class="line">            <span class="keyword">if</span> !running &#123;</span><br><span class="line">                    <span class="keyword">break</span> LOOP</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">print</span>(i)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p> 输出</p> <figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">0123456789</span><br></pre></td></tr></table></figure></li><li><p>快速关闭所有接收端，跳过已缓冲数据（一对多）</p> <figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">    ch := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">int</span>, <span class="number">3</span>)</span><br><span class="line">    running := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">bool</span>)</span><br><span class="line">    <span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">(ch <span class="keyword">chan</span> <span class="keyword">int</span>, running <span class="keyword">chan</span> <span class="keyword">bool</span>)</span></span> &#123;</span><br><span class="line">        <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">10</span>; i++ &#123;</span><br><span class="line">            ch &lt;- i</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">close</span>(running)</span><br><span class="line">    &#125;(ch, running)</span><br><span class="line"></span><br><span class="line">LOOP:</span><br><span class="line">    <span class="keyword">for</span> &#123;</span><br><span class="line">        <span class="keyword">select</span> &#123;</span><br><span class="line">        <span class="keyword">case</span> &lt;-running:</span><br><span class="line">            <span class="keyword">break</span> LOOP</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">select</span> &#123;</span><br><span class="line">        <span class="keyword">case</span> i := &lt;-ch:</span><br><span class="line">            <span class="built_in">print</span>(i)</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p> 输出</p> <figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">0123456</span><br></pre></td></tr></table></figure></li><li><p>关闭所有发送端（多对一）</p> <figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">    ch := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">int</span>, <span class="number">3</span>)</span><br><span class="line">    running := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">bool</span>)</span><br><span class="line">    <span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">(ch <span class="keyword">chan</span> <span class="keyword">int</span>, running <span class="keyword">chan</span> <span class="keyword">bool</span>)</span></span> &#123;</span><br><span class="line">        <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">10</span>; i++ &#123;</span><br><span class="line">            &lt;-ch</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">close</span>(running)</span><br><span class="line">    &#125;(ch, running)</span><br><span class="line"></span><br><span class="line">LOOP:</span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; ; &#123;</span><br><span class="line">        <span class="keyword">select</span> &#123;</span><br><span class="line">        <span class="keyword">case</span> &lt;-running:</span><br><span class="line">            <span class="keyword">break</span> LOOP</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">select</span> &#123;</span><br><span class="line">        <span class="keyword">case</span> ch &lt;- i:</span><br><span class="line">            <span class="built_in">print</span>(i)</span><br><span class="line">            i++</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p> 输出</p> <figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">0123456789</span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Go 中一些常被忽略的地方。&lt;br&gt;
    
    </summary>
    
      <category term="go" scheme="http://blog.miku.tk/categories/go/"/>
    
    
      <category term="go" scheme="http://blog.miku.tk/tags/go/"/>
    
  </entry>
  
  <entry>
    <title>Spark Streaming入门实践</title>
    <link href="http://blog.miku.tk/sparkstreaming/"/>
    <id>http://blog.miku.tk/sparkstreaming/</id>
    <published>2017-08-24T09:34:02.000Z</published>
    <updated>2017-08-31T07:35:05.000Z</updated>
    
    <content type="html"><![CDATA[<p>消费hermes kafkas数据，实时跟踪用户行为<br><a id="more"></a></p><h2 id="初始化Spark配置"><a href="#初始化Spark配置" class="headerlink" title="初始化Spark配置"></a>初始化Spark配置</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">String appName = <span class="string">"MyAppName"</span>;</span><br><span class="line"><span class="keyword">final</span> String checkpointDir = <span class="string">"hdfs:///user/checkpoint/"</span> + appName;</span><br><span class="line"><span class="keyword">final</span> <span class="keyword">long</span> batchInterval = <span class="number">60</span>; <span class="comment">// 数据采集时间范围（秒）</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">final</span> SparkConf sparkConf = <span class="keyword">new</span> SparkConf().setAppName(appName);</span><br><span class="line">JavaStreamingContext ssc = JavaStreamingContext.getOrCreate(checkpointDir, () -&gt; &#123;</span><br><span class="line">  <span class="comment">// 新建spark streaming context</span></span><br><span class="line">  JavaStreamingContext jssc = <span class="keyword">new</span> JavaStreamingContext(sparkConf, Durations.seconds(batchInterval));</span><br><span class="line">  jssc.sparkContext().setLogLevel(<span class="string">"error"</span>);</span><br><span class="line">  jssc.checkpoint(checkpointDir);</span><br><span class="line">  <span class="keyword">return</span> jssc;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="创建Kafka输入离散流"><a href="#创建Kafka输入离散流" class="headerlink" title="创建Kafka输入离散流"></a>创建Kafka输入离散流</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">JavaPairInputDStream&lt;String, Pageview&gt; stringPageviewPairInputDStream = KafkaUtils.createDirectStream(</span><br><span class="line">  ssc,</span><br><span class="line">  ...</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h2 id="数据预处理"><a href="#数据预处理" class="headerlink" title="数据预处理"></a>数据预处理</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 过滤无关数据</span></span><br><span class="line">JavaPairDStream&lt;String, Pageview&gt; stringPageviewPairDStream = stringPageviewPairInputDStream.filter(pageviewFilterFunction);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 去除重复数据</span></span><br><span class="line">stringPageviewPairDStream = stringPageviewPairDStream.reduceByKey(pageviewDistinctFunction);</span><br></pre></td></tr></table></figure><h2 id="用户行为跟踪处理"><a href="#用户行为跟踪处理" class="headerlink" title="用户行为跟踪处理"></a>用户行为跟踪处理</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 处理用户访问情况</span></span><br><span class="line">stringPageviewPairDStream = stringPageviewPairDStream.updateStateByKey((Function2&lt;List&lt;Pageview&gt;, Optional&lt;Pageview&gt;, Optional&lt;Pageview&gt;&gt;) (v1, v2) -&gt; &#123;</span><br><span class="line">  <span class="comment">// 没有新访问的情况，考虑是否继续追踪该用户</span></span><br><span class="line">  <span class="keyword">if</span> (v1.isEmpty()) &#123;</span><br><span class="line">    <span class="keyword">if</span> (v2.isPresent() &amp;&amp; System.currentTimeMillis() - v2.get().getTimestamp() &gt; TIMEOUT) &#123;</span><br><span class="line">      Pageview oldPageview = v2.get();</span><br><span class="line">      ...</span><br><span class="line">      <span class="keyword">return</span> Optional.absent();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> v2;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 有新访问的情况，考虑是否符合要求</span></span><br><span class="line">  Pageview newPageview = v1.get(<span class="number">0</span>);</span><br><span class="line">  ...</span><br><span class="line">  <span class="keyword">if</span> (isReady) &#123;</span><br><span class="line">    <span class="keyword">return</span> Optional.of(newPageview);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 新访问不合要求，且过去没有访问的情况</span></span><br><span class="line">  <span class="keyword">if</span> (!v2.isPresent()) &#123;</span><br><span class="line">    <span class="keyword">return</span> Optional.absent();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 新访问不合要求，且过去有访问的情况，更新访问时间</span></span><br><span class="line">  Pageview oldPageview = v2.get();</span><br><span class="line">  oldPageview.setTimestamp(newPageview.getTimestamp());</span><br><span class="line">  <span class="keyword">return</span> Optional.of(oldPageview);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="启动Spark应用"><a href="#启动Spark应用" class="headerlink" title="启动Spark应用"></a>启动Spark应用</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">stringPageviewPairDStream.print(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">ssc.start();</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">  ssc.awaitTermination();</span><br><span class="line">&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">  LOGGER.error(e);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Spark-Streaming性能指标及配置"><a href="#Spark-Streaming性能指标及配置" class="headerlink" title="Spark Streaming性能指标及配置"></a>Spark Streaming性能指标及配置</h2><ul><li>关键性能指标<ul><li>Scheduling Delay: Kafka队列数据读取时间，若太高需增大batch interval</li><li>Processing Time: 数据处理时间，若太高请优化代码，或增加资源分配<br><br></li></ul></li><li>配置参数<ul><li>spark.default.parallelism: 并行度，取决于任务数量，也就是一共需要多少线程来执行这些任务，一般为所有机器CPU总数的2~3倍，即每个CPU开2~3个线程，以充分利用CPU资源</li><li>spark.sql.shuffle.partitions: 分区数，取决于kafka队列的分区数，若每个分区数据量不大，可适当减少这个值</li><li>spark.streaming.concurrentJobs: 并行作业数量</li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;消费hermes kafkas数据，实时跟踪用户行为&lt;br&gt;
    
    </summary>
    
      <category term="java" scheme="http://blog.miku.tk/categories/java/"/>
    
      <category term="spark" scheme="http://blog.miku.tk/categories/java/spark/"/>
    
      <category term="spark streaming" scheme="http://blog.miku.tk/categories/java/spark/spark-streaming/"/>
    
    
      <category term="java" scheme="http://blog.miku.tk/tags/java/"/>
    
      <category term="spark" scheme="http://blog.miku.tk/tags/spark/"/>
    
      <category term="spark streaming" scheme="http://blog.miku.tk/tags/spark-streaming/"/>
    
      <category term="hermes kafka" scheme="http://blog.miku.tk/tags/hermes-kafka/"/>
    
  </entry>
  
  <entry>
    <title>Spring Boot使用笔记</title>
    <link href="http://blog.miku.tk/springboot/"/>
    <id>http://blog.miku.tk/springboot/</id>
    <published>2017-08-24T01:47:02.000Z</published>
    <updated>2017-08-24T01:47:02.000Z</updated>
    
    <content type="html"><![CDATA[<p>Spring Boot从入门到入坑<br><a id="more"></a></p><h2 id="项目结构"><a href="#项目结构" class="headerlink" title="项目结构"></a>项目结构</h2><p>完整的Spring Boot项目一般拥有以下目录结构，当项目够大时推荐先按功能模块化各部分功能，再在各模块中采用此目录结构<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">root</span><br><span class="line">├─build.gradle</span><br><span class="line">└─src</span><br><span class="line">   ├─main</span><br><span class="line">   │  ├─java/com/spring/boot</span><br><span class="line">   │  │  ├─Application.java</span><br><span class="line">   │  │  ├─web</span><br><span class="line">   │  │  │  ├─controller</span><br><span class="line">   │  │  │  │  └─GreetingController.java</span><br><span class="line">   │  │  │  └─json</span><br><span class="line">   │  │  │     └─GreetingJson.java</span><br><span class="line">   │  │  ├─service</span><br><span class="line">   │  │  │  ├─GreetingService.java</span><br><span class="line">   │  │  │  └─impl</span><br><span class="line">   │  │  │     └─GreetingServiceImpl.java</span><br><span class="line">   │  │  ├─domain</span><br><span class="line">   │  │  │  ├─repository</span><br><span class="line">   │  │  │  │  ├─GreetingRepository.java</span><br><span class="line">   │  │  │  │  └─impl</span><br><span class="line">   │  │  │  │     └─GreetingRepositoryImpl.java</span><br><span class="line">   │  │  │  └─entity</span><br><span class="line">   │  │  │     └─Greeting.java</span><br><span class="line">   │  │  ├─enums</span><br><span class="line">   │  │  │  └─GreetingType.java</span><br><span class="line">   │  │  ├─exception</span><br><span class="line">   │  │  │  └─BusinessException.java</span><br><span class="line">   │  │  ├─config</span><br><span class="line">   │  │  │  ├─InitializingBeanConfig.java</span><br><span class="line">   │  │  │  ├─SchedulingConfig.java</span><br><span class="line">   │  │  │  └─WebSecurityConfig.java</span><br><span class="line">   │  │  └─utils</span><br><span class="line">   │  └─resources</span><br><span class="line">   │     ├─application.properties</span><br><span class="line">   │     └─data.sql</span><br><span class="line">   └─test/java/cn/ibm/qrepmonitor</span><br><span class="line">         └─ApplicationTests.java</span><br></pre></td></tr></table></figure></p><h2 id="Gradle"><a href="#Gradle" class="headerlink" title="Gradle"></a>Gradle</h2><p>Spring Boot的build.gradle文件包含以下内容<br><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">plugins &#123;</span><br><span class="line">    id <span class="string">'org.springframework.boot'</span> version <span class="string">'1.5.2.RELEASE'</span></span><br><span class="line">    id <span class="string">'java'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">jar &#123;</span><br><span class="line">baseName = <span class="string">'ProjectName'</span></span><br><span class="line">version = <span class="string">'1.0'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">sourceCompatibility</span> = <span class="number">1.8</span></span><br><span class="line"></span><br><span class="line">tasks.withType(JavaCompile) &#123;</span><br><span class="line"><span class="keyword">options</span>.encoding = <span class="string">"UTF-8"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">repositories</span> &#123;</span><br><span class="line">jcenter()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">dependencies</span> &#123;</span><br><span class="line"><span class="keyword">compile</span>(<span class="string">'org.springframework.boot:spring-boot-starter-web'</span>)</span><br><span class="line">    <span class="keyword">runtime</span>(<span class="string">'org.springframework.boot:spring-boot-devtools'</span>)</span><br><span class="line">testCompile(<span class="string">'org.springframework.boot:spring-boot-starter-test'</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>其它常用依赖<br><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">compile</span>(<span class="string">'org.springframework.boot:spring-boot-starter-security'</span>)</span><br><span class="line"><span class="keyword">compile</span>(<span class="string">'org.springframework.security.oauth:spring-security-oauth2'</span>)</span><br><span class="line"><span class="keyword">compile</span>(<span class="string">'org.springframework.boot:spring-boot-starter-data-jpa'</span>)</span><br></pre></td></tr></table></figure></p><p>自定义本地依赖<br><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">compile</span>(<span class="keyword">fileTree</span>(dir: <span class="string">'lib'</span>, <span class="keyword">include</span>: <span class="string">'*.jar'</span>))</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Spring Boot从入门到入坑&lt;br&gt;
    
    </summary>
    
      <category term="java" scheme="http://blog.miku.tk/categories/java/"/>
    
      <category term="spring" scheme="http://blog.miku.tk/categories/java/spring/"/>
    
      <category term="spring boot" scheme="http://blog.miku.tk/categories/java/spring/spring-boot/"/>
    
    
      <category term="java" scheme="http://blog.miku.tk/tags/java/"/>
    
      <category term="spring" scheme="http://blog.miku.tk/tags/spring/"/>
    
      <category term="spring boot" scheme="http://blog.miku.tk/tags/spring-boot/"/>
    
      <category term="spring mvc" scheme="http://blog.miku.tk/tags/spring-mvc/"/>
    
      <category term="spring data jpa" scheme="http://blog.miku.tk/tags/spring-data-jpa/"/>
    
  </entry>
  
  <entry>
    <title>Java 日常笔记</title>
    <link href="http://blog.miku.tk/javanote/"/>
    <id>http://blog.miku.tk/javanote/</id>
    <published>2017-07-15T10:47:33.000Z</published>
    <updated>2018-02-06T15:18:46.000Z</updated>
    
    <content type="html"><![CDATA[<p>Java 中一些常被忽略的地方。<br><a id="more"></a></p><ol><li><p>float/double 因精度问题，不能用于大数计算</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">System.out.println(<span class="number">123456789f</span>); </span><br><span class="line">System.out.println(<span class="number">12345678909876543</span>d);</span><br><span class="line">System.out.println(<span class="keyword">true</span> ? <span class="number">123456789</span> : <span class="number">1f</span>);</span><br></pre></td></tr></table></figure><p> 输出</p> <figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1.23456792E8</span><br><span class="line">1.2345678909876544E16</span><br><span class="line">1.23456792E8</span><br></pre></td></tr></table></figure></li><li><p>float 与 double 之间因精度问题，不能比较</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">System.out.println(<span class="number">3.3</span> &gt; <span class="number">3.3f</span>);</span><br></pre></td></tr></table></figure><p> 输出</p> <figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">true</span><br></pre></td></tr></table></figure></li><li><p>计算 BigDecimal 应使用字符串进行初始化构造，使用 compareTo 进行比较</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">BigDecimal a = <span class="keyword">new</span> BigDecimal(<span class="number">2.1</span>).subtract(<span class="keyword">new</span> BigDecimal(<span class="number">1.2</span>));</span><br><span class="line">BigDecimal b = <span class="keyword">new</span> BigDecimal(<span class="number">0.9</span>);</span><br><span class="line">System.out.println(a.equals(b));</span><br><span class="line">System.out.println(a.compareTo(b));</span><br><span class="line">System.out.println(a.doubleValue() == b.doubleValue());</span><br><span class="line"></span><br><span class="line">BigDecimal c = <span class="keyword">new</span> BigDecimal(<span class="string">"2.1"</span>).subtract(<span class="keyword">new</span> BigDecimal(<span class="string">"1.20"</span>));</span><br><span class="line">BigDecimal d = <span class="keyword">new</span> BigDecimal(<span class="string">"0.9"</span>);</span><br><span class="line">System.out.println(c.equals(d));</span><br><span class="line">System.out.println(c.compareTo(d));</span><br><span class="line">System.out.println(c.doubleValue() == d.doubleValue());</span><br></pre></td></tr></table></figure><p> 输出</p> <figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">false</span><br><span class="line">1</span><br><span class="line">false</span><br><span class="line">false</span><br><span class="line">0</span><br><span class="line">true</span><br></pre></td></tr></table></figure></li><li><p>考虑实现 Comparable 接口，不要使用差值以免溢出</p></li><li><p>Math.abs(Integer.MIN_VALUE) &lt; 0</p></li><li><p>奇偶判别使用 (i &amp; 1) == 0；判断 2 指数 (i &amp; (i - 1)) == 0</p></li><li><p>Random 从 Java7 开始为线程安全类，ThreadLocalRandom 效率更高，SecureRandom 更随机</p></li><li><p>Thread.join 调用 wait 方法，释放了当前对象锁</p></li><li><p>DateFormat 非线程安全类（原因：Calendar），多线程访问应用 ThreadLocal 创建；DateFormat 无法识别毫秒格式，使用 SimpleDateFormat 指定具体格式识别；Java8 用 DateTimeFormatter 代替，线程安全类</p></li><li><p>Date 和 Calendar 的月份从 0 开始，表示一月；星期从 1 开始，表示周日；Date 无时区，new Date(0) 为标准零时，即北京时间 8 点， Calendar 默认当地时区，Calendar.getInstance().clear() 为当地时间零时；Java8 用 java.time 包代替，线程安全类</p></li><li><p>equals 重写规则，利用 Double.compare、Float.compare、Arrays.equals 和 Arrays.hashCode 方法</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object obj)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (obj == <span class="keyword">this</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (obj == <span class="keyword">null</span> || <span class="keyword">this</span>.getClass() != obj.getClass() || <span class="keyword">this</span>.hashCode() != obj.hashCode()) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ...;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> ...;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>文件读写</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> FileInputStream(<span class="string">"fileName"</span>);  <span class="comment">// 无缓冲字节输入流</span></span><br><span class="line"><span class="keyword">new</span> BufferedInputStream(<span class="keyword">new</span> FileInputStream(<span class="string">"fileName"</span>));  <span class="comment">// 缓冲字节输入流</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> PrintStream(<span class="string">"fileName"</span>);  <span class="comment">// 无缓冲字节输出流（内部 FileOutputStream，需要注意部分方法并非字节输出流，或直接用 FileOutputStream）</span></span><br><span class="line"><span class="keyword">new</span> PrintStream(<span class="keyword">new</span> BufferedOutputStream(<span class="keyword">new</span> FileOutputStream(<span class="string">"fileName"</span>)));  <span class="comment">// 缓冲字节输出流（需要注意部分方法并非字节输出流，或直接用 BufferedOutputStream）</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> Scanner(<span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> FileReader(<span class="string">"fileName"</span>)));  <span class="comment">// 缓冲字符输入流（或直接用 BufferedReader）</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> PrintWriter(<span class="string">"fileName"</span>);  <span class="comment">// 缓冲字符输出流（内部 BufferedWriter）</span></span><br></pre></td></tr></table></figure></li><li><p>Stack extends Vector，用 Deque 吧</p></li><li><p>复合赋值隐含自动转型，编译器不会报错，但不利于阅读</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">byte</span> b = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">short</span> i = <span class="number">128</span>;</span><br><span class="line">b += i;  <span class="comment">// 相当于 b = (byte) (b + i); 注意 b + i 会先提升 int 类型</span></span><br><span class="line">System.out.println(b);</span><br></pre></td></tr></table></figure><p> 输出</p> <figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-128</span><br></pre></td></tr></table></figure></li><li><p>byte[] 转 String 需指定字符集，因为默认字符集根据平台而定，是不确定的</p></li><li><p>移位操作的移位数会自动取余，int 的 % 32，long 的 % 64</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">System.out.println(-<span class="number">1</span> &lt;&lt; <span class="number">32</span>);</span><br><span class="line">System.out.println(-<span class="number">1</span> &lt;&lt; <span class="number">31</span> &lt;&lt; <span class="number">1</span>);</span><br></pre></td></tr></table></figure><p> 输出</p> <figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">-1</span><br><span class="line">0</span><br></pre></td></tr></table></figure></li><li><p>实现不同接口同一方法抛出的异常取交集的子集</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">interface1</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">throwsException</span><span class="params">()</span> <span class="keyword">throws</span> FileNotFoundException, IOException</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">interface2</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">throwsException</span><span class="params">()</span> <span class="keyword">throws</span> IOException, ClassNotFoundException</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Class</span> <span class="keyword">implements</span> <span class="title">interface1</span>, <span class="title">interface2</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">throwsException</span><span class="params">()</span> <span class="keyword">throws</span> ClosedChannelException </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>成员变量与动态代码块中的异常在构造函数中抛出</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">boolean</span> bool = throwsException();</span><br><span class="line">&#123;</span><br><span class="line">    throwsException();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Class</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">throwsException</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> Exception();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>try-with-resources</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// since java7</span></span><br><span class="line">    <span class="keyword">try</span> (InputStream inputStream = <span class="keyword">new</span> FileInputStream(<span class="string">"fileName"</span>);</span><br><span class="line">        OutputStream outputStream = <span class="keyword">new</span> FileOutputStream(<span class="string">"fileName"</span>)) &#123;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (FileNotFoundException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123; <span class="comment">// throw by close method</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// before java7</span></span><br><span class="line">    InputStream inputStream = <span class="keyword">null</span>;</span><br><span class="line">    OutputStream outputStream = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        inputStream = <span class="keyword">new</span> FileInputStream(<span class="string">"fileName"</span>);</span><br><span class="line">        outputStream = <span class="keyword">new</span> FileOutputStream(<span class="string">"fileName"</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (FileNotFoundException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123; <span class="comment">// try to close by Closeable</span></span><br><span class="line">        close(inputStream, outputStream);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Try to close resources which implements &#123;<span class="doctag">@link</span> Closeable&#125;</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> closeables methods which implements &#123;<span class="doctag">@link</span> Closeable&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">(Closeable... closeables)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (Closeable closeable : closeables) &#123;</span><br><span class="line">        <span class="keyword">if</span> (closeable != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                closeable.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>重载参数就近</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    func(<span class="keyword">null</span>); <span class="comment">// call func(B b)</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span> <span class="keyword">extends</span> <span class="title">A</span> </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">func</span><span class="params">(A a)</span> </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">func</span><span class="params">(B b)</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>类初始化通过 Class.forName、实例化、调用静态方法或访问静态变量触发</p></li><li><p>类变量初始化-&gt;类变量从上到下依次赋值</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Class</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Class clazz = <span class="keyword">new</span> Class();</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> num = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Class</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(num);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> 输出</p> <figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">0</span><br></pre></td></tr></table></figure></li><li><p>类的初始化线程锁：同一时刻只能有一个线程进行一个类的初始化，其它线程对该类的初始化请求将被挂起</p></li><li><p>重写类的调用</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">A</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">override</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">callOverride</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(override());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">new</span> B().callOverride();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span> <span class="keyword">extends</span> <span class="title">A</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">override</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> 输出</p> <figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">2</span><br></pre></td></tr></table></figure></li><li><p>被遮蔽的方法不会重载</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">wake</span><span class="params">()</span> </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">sleep</span><span class="params">()</span> </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Class</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">sleep</span><span class="params">(<span class="keyword">int</span> time)</span> </span>&#123;</span><br><span class="line">        wake();  <span class="comment">// correct</span></span><br><span class="line">        sleep();  <span class="comment">// error</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li><li><p>动态内部类的构造器具有一个隐藏参数，反射构建时需指明</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Inner.class.getConstructor(Outer.class).newInstance(<span class="keyword">new</span> Outer());</span><br></pre></td></tr></table></figure></li><li><p>Process 的输入流和错误流有缓冲区大小限制（由平台决定，本机测试为 4120 个字符），任一缓冲区满则进程阻塞，故需及时读取返回内容，若无需返回结果，则直接关闭相应流</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Process p = Runtime.getRuntime().exec(<span class="string">"command"</span>);</span><br><span class="line">p.getInputStream().close();</span><br><span class="line">p.getErrorStream().close();</span><br></pre></td></tr></table></figure></li><li><p>WeakHashMap 将 key 加到 WeakReference 而非 value，是因为在 HashMap 中 key 具有唯一性，而 value 可能同时存在不同 key 中，不能实现部分回收，且若要 value 能被及时回收，只要将其加入 WeakReference 再放入 HashMap 即可；WeakHashMap 使用强引用常量 NULL_KEY 来代替 null，导致其无法被回收，value 的强引用需要再次操作 WeakHashMap 才能去除</p></li><li><p>clone 方法应调用 super.clone() 以返回正确的对象类型，clone 其每个引用型成员变量，加上 implements Cloneable，但 final 引用型成员变量无法 clone，且避免调用可重写方法以防止子类覆写导致其调用 super.clone() 出错，最重要的是确认所有的父类是否也满足这些要求。综上所述，应优先考虑拷贝构造器，而不是覆写 clone 方法</p></li><li><p>实现 toString 方法，并说明相应的格式样例</p></li><li><p>finalize 被动释放相关资源，通常用于对功能和性能没有影响的资源，无法保证一定会被执行，且即使执行也会由于低优先级而延长对象回收时间</p></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Java 中一些常被忽略的地方。&lt;br&gt;
    
    </summary>
    
      <category term="java" scheme="http://blog.miku.tk/categories/java/"/>
    
    
      <category term="java" scheme="http://blog.miku.tk/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>Hello World - Keras</title>
    <link href="http://blog.miku.tk/keras/"/>
    <id>http://blog.miku.tk/keras/</id>
    <published>2017-06-27T15:47:33.000Z</published>
    <updated>2017-06-27T15:47:33.000Z</updated>
    
    <content type="html"><![CDATA[<p>基于多层神经网络的二分类模型，开始你的第一次keras深度学习训练。<br>关于环境搭建，请见<a href="http://keras-cn.readthedocs.io/en/latest/for_beginners/keras_linux/#_5" target="_blank" rel="noopener">Keras安装教程</a>。<br><a id="more"></a></p><h2 id="导入所需的python库"><a href="#导入所需的python库" class="headerlink" title="导入所需的python库"></a>导入所需的python库</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">from</span> keras.models <span class="keyword">import</span> Sequential</span><br><span class="line"><span class="keyword">from</span> keras.layers <span class="keyword">import</span> Dense</span><br><span class="line"><span class="keyword">from</span> sklearn.metrics <span class="keyword">import</span> roc_auc_score, roc_curve, recall_score, f1_score</span><br></pre></td></tr></table></figure><h2 id="导入你的数据"><a href="#导入你的数据" class="headerlink" title="导入你的数据"></a>导入你的数据</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">x_train = np.random.random((<span class="number">10</span>, <span class="number">3</span>))</span><br><span class="line">y_train = np.random.randint(<span class="number">2</span>, size=(<span class="number">10</span>, <span class="number">1</span>))</span><br></pre></td></tr></table></figure><p>或通过文件导入<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">x_train = np.genfromtxt(x_train_path, delimiter=<span class="string">','</span>)</span><br><span class="line">y_train = np.genfromtxt(y_train_path, delimiter=<span class="string">','</span>)</span><br></pre></td></tr></table></figure></p><h2 id="建立你的模型"><a href="#建立你的模型" class="headerlink" title="建立你的模型"></a>建立你的模型</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">model = Sequential()</span><br></pre></td></tr></table></figure><ol><li><p>模型的网络层设定</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">model.add(Dense(<span class="number">128</span>, input_dim=<span class="number">3</span>, activation=<span class="string">'tanh'</span>))</span><br><span class="line">model.add(Dense(<span class="number">1</span>, activation=<span class="string">'sigmoid'</span>))</span><br></pre></td></tr></table></figure></li><li><p>模型的网络配置设定</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">model.compile(loss=<span class="string">'binary_crossentropy'</span>, optimizer=<span class="string">'rmsprop'</span>)</span><br></pre></td></tr></table></figure></li></ol><h2 id="训练你的模型"><a href="#训练你的模型" class="headerlink" title="训练你的模型"></a>训练你的模型</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">model.fit(x_train, y_train, epochs=<span class="number">20</span>, batch_size=<span class="number">5</span>)</span><br></pre></td></tr></table></figure><h2 id="评估你的模型"><a href="#评估你的模型" class="headerlink" title="评估你的模型"></a>评估你的模型</h2><ol><li><p>导入你的测试数据</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">x_test = np.random.random((<span class="number">10</span>, <span class="number">3</span>))</span><br><span class="line">y_test = np.random.randint(<span class="number">2</span>, size=(<span class="number">10</span>, <span class="number">1</span>))</span><br></pre></td></tr></table></figure></li><li><p>预测你的数据</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">y_prob = model.predict(x_test)</span><br></pre></td></tr></table></figure></li><li><p>计算你的模型预测AUC值</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">auc = roc_auc_score(y_test, y_prob)</span><br><span class="line">print(<span class="string">"AUC: "</span> + str(auc))</span><br></pre></td></tr></table></figure></li></ol><ul><li><p>其它评价指标</p><ul><li><p>约登指数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">y_train_prob = model.predict(x_train)</span><br><span class="line">fpr, tpr, thresholds = roc_curve(y_train, y_train_prob)</span><br><span class="line">threshold = thresholds[np.argmax(tpr - fpr)]</span><br><span class="line"></span><br><span class="line">print(<span class="string">"threshold: "</span> + str(threshold))</span><br></pre></td></tr></table></figure></li><li><p>利用约登指数进行预测结果的二元分类</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">y_prob_binary = y_prob &gt; threshold</span><br></pre></td></tr></table></figure></li><li><p>灵敏度</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sensitivity = recall_score(y_test, y_prob_binary)</span><br><span class="line">print(<span class="string">"Sensitivity: "</span> + str(sensitivity))</span><br></pre></td></tr></table></figure></li><li><p>特异度</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">y_test_positive = np.sum(y_test)</span><br><span class="line">specifity = <span class="number">1</span> - (np.sum(y_prob_binary) - sensitivity * y_test_positive) / (y_test.shape[<span class="number">0</span>] - y_test_positive)</span><br><span class="line"></span><br><span class="line">print(<span class="string">"Specifity: "</span> + str(specifity))</span><br></pre></td></tr></table></figure></li><li><p>F1值</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">f1 = f1_score(y_test, y_prob_binary)</span><br><span class="line">print(<span class="string">"F1: "</span> + str(f1))</span><br></pre></td></tr></table></figure></li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;基于多层神经网络的二分类模型，开始你的第一次keras深度学习训练。&lt;br&gt;关于环境搭建，请见&lt;a href=&quot;http://keras-cn.readthedocs.io/en/latest/for_beginners/keras_linux/#_5&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Keras安装教程&lt;/a&gt;。&lt;br&gt;
    
    </summary>
    
      <category term="deep learning" scheme="http://blog.miku.tk/categories/deep-learning/"/>
    
      <category term="keras" scheme="http://blog.miku.tk/categories/deep-learning/keras/"/>
    
    
      <category term="deep learning" scheme="http://blog.miku.tk/tags/deep-learning/"/>
    
      <category term="keras" scheme="http://blog.miku.tk/tags/keras/"/>
    
      <category term="二分类" scheme="http://blog.miku.tk/tags/%E4%BA%8C%E5%88%86%E7%B1%BB/"/>
    
  </entry>
  
</feed>
